{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AutoScalingText","state","scale","this","node","actualScale","parentNode","offsetWidth","setState","_this2","react_default","a","createElement","className","style","transform","concat","ref","props","children","React","Component","CalculatorDisplay","_this$props","value","Object","objectWithoutProperties","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","match","test","assign","App_AutoScalingText","App","_useState","useState","_useState2","slicedToArray","displayValue","setDisplayValue","_useState3","_useState4","prevValue","setPrevValue","_useState5","_useState6","operator","setOperator","_useState7","_useState8","waitingForOperator","setWaitingForOperator","CalculatorOperations","/","nextValue","X","+","-","=","id","App_CalculatorDisplay","onClick","signToggledValue","includes","substring","onToggleSign","length","onOperatorInput","createButtons","flex","onDigitInput","dotInsertedValue","onDotInput","buttonsData","map","x","key","String","digit","digitInsertedValue","operatorInserted","console","log","inputValue","currentValue","newValue","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16766c57.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nclass AutoScalingText extends React.Component {\n  state = {\n    scale: 1\n  };\n\n  componentDidUpdate() {\n    const { scale } = this.state\n\n    const node = this.node\n    const parentNode = node.parentNode\n\n    const availableWidth = parentNode.offsetWidth\n    const actualWidth = node.offsetWidth\n    const actualScale = availableWidth / actualWidth\n\n    if (scale === actualScale)\n      return\n\n    if (actualScale < 1) {\n      this.setState({ scale: actualScale })\n    } else if (scale < 1) {\n      this.setState({ scale: 1 })\n    }\n  }\n\n  render() {\n    const { scale } = this.state\n\n    return (\n      <div\n        className=\"auto-scaling-text\"\n        style={{ transform: `scale(${scale},${scale})` }}\n        ref={node => this.node = node}\n      >{this.props.children}</div>\n    )\n  }\n}\n\n\nclass CalculatorDisplay extends React.Component {\n  render() {\n    const { value, ...props } = this.props\n\n    const language = navigator.language || 'en-US'\n    let formattedValue = parseFloat(value).toLocaleString(language, {\n      useGrouping: true,\n      maximumFractionDigits: 6\n    })\n\n    // Add back missing .0 in e.g. 12.0\n    const match = value.match(/\\.\\d*?(0*)$/)\n\n    if (match)\n      formattedValue += (/[1-9]/).test(match[0]) ? match[1] : match[0]\n\n    return (\n      <div {...props} className=\"calculator-display\">\n        <AutoScalingText>{formattedValue}</AutoScalingText>\n      </div>\n    )\n  }\n}\n\n\nfunction App(props) {\n  const [displayValue, setDisplayValue] = useState(\"0\");\n  const [prevValue, setPrevValue] = useState(null);\n  const [operator, setOperator] = useState(null);\n  const [waitingForOperator, setWaitingForOperator] = useState(false);\n\n  const CalculatorOperations = {\n    \"/\": (prevValue, nextValue) => prevValue / nextValue,\n    \"X\": (prevValue, nextValue) => prevValue * nextValue,\n    \"+\": (prevValue, nextValue) => prevValue + nextValue,\n    \"-\": (prevValue, nextValue) => prevValue - nextValue,\n    \"=\": (prevValue, nextValue) => nextValue\n  };\n\n  return (\n    <div className=\"root\">\n\n      <div id=\"wrapper\">\n        <CalculatorDisplay value={displayValue} />\n\n        {/*first row */}\n        <div className=\"row\">\n          <button className=\"button first-row-button\" onClick={() => onClearInput()}>AC</button>\n          <button className=\"button first-row-button\" onClick={() => onToggleSign()}>±</button>\n          <button className=\"button first-row-button\" onClick={() => clearLastDigit()}><i className=\"fas fa-backspace\"></i></button>\n          <button className=\"button operator-button\" onClick={() => onOperatorInput(\"/\")}>÷</button>\n        </div>\n\n        {/*second row */}\n        <div className=\"row\">\n          {createButtons([7, 8, 9])}\n          <button className=\"button operator-button\" onClick={() => onOperatorInput(\"X\")}>x</button>\n        </div>\n\n        {/*third row */}\n        <div className=\"row\">\n          {createButtons([4, 5, 6])}\n          <button className=\"button operator-button\" onClick={() => onOperatorInput(\"-\")}>-</button>\n        </div>\n\n        {/*fourth row */}\n        <div className=\"row\">\n          {createButtons([1, 2, 3])}\n          <button className=\"button operator-button\" onClick={() => onOperatorInput(\"+\")}>+</button>\n        </div>\n\n        {/*fifth row */}\n        <div className=\"row\">\n          <button className=\"button\" style={{ flex: \"2.3\" }} onClick={() => onDigitInput(\"0\")}> 0 </button>\n          <button className=\"button\" onClick={() => onDotInput()}>.</button>\n          <button className=\"button operator-button\" onClick={() => onOperatorInput(\"=\")}>=</button>\n        </div>\n\n      </div>\n    </div>\n  );\n\n  function createButtons(buttonsData) {\n    return buttonsData.map(x => (\n      <button className=\"button\" key={x} onClick={() => onDigitInput(String(x))}>{x}</button>\n    ));\n  }\n\n  function clearLastDigit() {\n    setDisplayValue(displayValue.substring(0, displayValue.length - 1) || '0');\n  }\n\n  function onDigitInput(digit) {\n    let digitInsertedValue;\n    if (waitingForOperator) {\n      setDisplayValue(digit);\n      setWaitingForOperator(false);\n    } else {\n      digitInsertedValue = displayValue === \"0\" ? digit : displayValue + String(digit);\n      setDisplayValue(digitInsertedValue);\n    }\n  }\n\n  function onClearInput() {\n    setDisplayValue(\"0\");\n    setPrevValue(null);\n    setOperator(null);\n    setWaitingForOperator(false);\n  }\n\n  function onToggleSign() {\n    const signToggledValue = displayValue.includes(\"-\") ? displayValue.substring(1) : \"-\" + displayValue;\n    setDisplayValue(signToggledValue);\n  }\n\n  function onDotInput() {\n    const dotInsertedValue = displayValue.includes(\".\") ? displayValue : displayValue + \".\";\n    setDisplayValue(dotInsertedValue);\n  }\n\n  function onOperatorInput(operatorInserted) {\n    console.log(operatorInserted);\n    const inputValue = parseFloat(displayValue);\n\n    if (prevValue == null) {\n      setPrevValue(inputValue);\n    } else if (operator) {\n      const currentValue = prevValue;\n      const newValue = CalculatorOperations[operator](currentValue, inputValue);\n\n      setPrevValue(newValue);\n      setDisplayValue(String(newValue));\n    }\n\n    setWaitingForOperator(true);\n    setOperator(operatorInserted);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}